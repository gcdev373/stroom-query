task wrapper(type: Wrapper) {
    gradleVersion = '4.1'
}

buildscript {
    repositories {
        mavenLocal()
        jcenter()
    }
    dependencies {
        classpath group: 'gchq', name: 'urlDependencyPlugin', version: 'v0.1'
        classpath group: 'ca.cutterslade.gradle', name: 'gradle-dependency-analyze', version: '1.1.0'
    }
}

// If the project has a value for the passed property (i.e from the cmd line via -PpropName=xxx) use that, else use a default value.
ext.getPropertyOrDefault = { propName, defaultValue ->
    return project.hasProperty(propName) ?
            project.getProperty(propName) :
            defaultValue
}

allprojects {
    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    apply plugin: 'gchq.urldependencies'

    group = 'stroom'
    version = getPropertyOrDefault('version', 'SNAPSHOT')
}

ext.versions = [
    stroomExpression: 'v1.0.0'
]

subprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        mavenLocal()
        maven { url "http://repo.maven.apache.org/maven2" }
    }

    dependencies {
        testCompile 'junit:junit:4.12'
        testCompile 'org.mockito:mockito-core:2.0.2-beta'
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }
}

project(':stroom-query-api') {
    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
            }
        }
    }
}

project(':stroom-query-common') {
    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
            }
        }
    }
}

//lib names for urlDependenciesPlugin
ext.urlLibs = [
        stroomExpression: "stroom-expression-$versions.stroomExpression"
]

urlDependencies {
    libs "${libs}"
    compile(urlLibs.stroomExpression,
            "https://github.com/gchq/stroom-expression/releases/download/$versions.stroomExpression/${urlLibs.stroomExpression}.jar")
}

task aggregatedJavadocs(type: Javadoc, description: 'Generate javadocs from all child projects as if it was a single project', group: 'Documentation') {
	destinationDir = file("$buildDir/docs/javadoc")
	title = "$project.name $version API"
	options.author true
	options.links 'http://docs.oracle.com/javase/8/docs/api/'
	options.addStringOption 'Xdoclint:none', '-quiet'
	
	subprojects.each { proj ->
		proj.tasks.withType(Javadoc).each { javadocTask ->
			source += javadocTask.source
			classpath += javadocTask.classpath
			excludes += javadocTask.excludes
			includes += javadocTask.includes
		}
	}
}
