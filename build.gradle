task wrapper(type: Wrapper) {
    gradleVersion = '4.1'
}

//if the project has a value for the passed property (i.e from the cmd line via -PpropName=xxx)
//use that, else use a default value
ext.getPropertyOrDefault = { propName, defaultValue -> 
    def val;
    if (project.hasProperty(propName) && project.getProperty(propName) != "unspecified" && project.getProperty(propName) != "") {
        val = project.getProperty(propName)
        println "Using propery $propName with value $val"
    } else {
        val = defaultValue
        println "Propery $propName has no value, using default value $val"
    }
    return val;
}

ext.versions = [
    //----------Stroom-----------------
    stroomQuery: getPropertyOrDefault('version', 'SNAPSHOT'),

    //------Stroom-repos---------------
    stroomExpression: 'v1.0.0',
    eventLogging: 'v3.1.1_schema-v3.1.2',

    //------------3rd-party------------
    dropwizard: '1.2.0',
    jackson: '2.8.6',
    kafka: '0.10.0.1',
    slf4j: '1.7.24', //in line with dropwizard 1.1.0
    swagger: '1.5.16',
    zzDUMMYzz: 'makes sorting this list easier'
]

//lib names for urlDependenciesPlugin
ext.urlLibs = [
    stroomExpression: "stroom-expression-$versions.stroomExpression",
    eventLogging: "event-logging-$versions.eventLogging",
]

println "Using project version: [${versions.stroomQuery}]"

//dependency strings for use in sub projects
ext.libs = [
    dropwizard_core: "io.dropwizard:dropwizard-core:$versions.dropwizard",
    dropwizard_hibernate: "io.dropwizard:dropwizard-hibernate:$versions.dropwizard",
    jackson_annotations: "com.fasterxml.jackson.core:jackson-annotations:$versions.jackson",
    jackson_core: "com.fasterxml.jackson.core:jackson-core:$versions.jackson",
    jackson_databind: "com.fasterxml.jackson.core:jackson-databind:$versions.jackson", 
    junit: "junit:junit:4.12",
    kafka: "org.apache.kafka:kafka-clients:$versions.kafka", //CDH5.10 uses kafka 10.0, Kafka <10.2 is picky about client and server versions.
    mockito_core: "org.mockito:mockito-core:2.0.2-beta",
    slf4j_api: "org.slf4j:slf4j-api:$versions.slf4j",
    swagger_annotations: "io.swagger:swagger-annotations:$versions.swagger",
    ws_rs_api: "javax.ws.rs:javax.ws.rs-api:2.0.1",
    zzDUMMYzz: "makes sorting easier"
]

buildscript {
    repositories {
        mavenLocal()
        jcenter()
    }
    dependencies {
        classpath 'gchq:urlDependencyPlugin:v0.2.0'
        classpath 'ca.cutterslade.gradle:gradle-dependency-analyze:1.1.0'
        classpath 'com.benjaminsproule:swagger-gradle-plugin:0.1.2'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
    }
}


allprojects {
    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    apply plugin: 'gchq.urldependencies'
    apply plugin: 'com.jfrog.bintray'

    group = 'stroom'
    version = versions.stroomQuery

}

def pomConfig = {
    licenses {
        license {
            name "The Apache Software License, Version 2.0"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
            distribution "repo"
        }
    }
    scm {
       url "https://github.com/stroom/stroom-query"
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        mavenLocal()
        maven { url "http://repo.maven.apache.org/maven2" }
    }

    dependencies {
        testCompile libs.junit
        testCompile libs.mockito_core
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifact sourcesJar
                artifact javadocJar
                pom.withXml {
                    def root = asNode()
                    root.appendNode('name', project.name)
                    root.children().last() + pomConfig
                }
            }
        }
    }

    bintray {
        //Must never write these to log or system out
        user = System.getenv('BINTRAY_USER') //set in Travis UI
        key = System.getenv('BINTRAY_KEY') //set in Travis UI

        publications = ['mavenJava']

        pkg {
            repo = 'stroom'
            name = 'stroom-query'
            userOrg = 'stroom'
            licenses = ['Apache-2.0']
            vcsUrl = 'https://github.com/gchq/stroom-query.git'
            version {
                name = "${versions.stroomQuery}"
                desc = "stroom-query-${versions.stroomQuery}"
                released  = new Date()
                vcsTag = "${versions.stroomQuery}"
            }
        }
    }

    //ensure we download our libs before compiling java
    tasks.compileJava.dependsOn ':downloadUrlDependencies'
}

project(':stroom-query-api') {
    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
            }
        }
    }
}

project(':stroom-query-common') {
    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
            }
        }
    }
}

project(':stroom-query-audit') {
    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
            }
        }
    }
}

project(':stroom-query-hibernate') {
    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
            }
        }
    }
}

urlDependencies {
    libs "${libs}"
    compile(
        urlLibs.stroomExpression,
        "https://github.com/gchq/stroom-expression/releases/download/$versions.stroomExpression/${urlLibs.stroomExpression}.jar")
    compile(urlLibs.eventLogging,
            "https://github.com/gchq/event-logging/releases/download/$versions.eventLogging/${urlLibs.eventLogging}.jar")
}

task aggregatedJavadocs(
    type: Javadoc, 
    description: 'Generate javadocs from all child projects as if it was a single project', 
    group: 'Documentation') {

	destinationDir = file("$buildDir/docs/javadoc")
	title = "$project.name $version API"
	options.author true
	options.links 'http://docs.oracle.com/javase/8/docs/api/'
	options.addStringOption 'Xdoclint:none', '-quiet'
	
	subprojects.each { proj ->
		proj.tasks.withType(Javadoc).each { javadocTask ->
			source += javadocTask.source
			classpath += javadocTask.classpath
			excludes += javadocTask.excludes
			includes += javadocTask.includes
		}
	}
}


//task createPom {
    //doLast {
        //pom {
            //project {
                ////groupId 'org.example'
                ////artifactId 'test'
                ////version '1.0.0'

                //inceptionYear '2008'
                //licenses {
                    //license {
                        //name 'The Apache Software License, Version 2.0'
                        //url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        //distribution 'repo'
                    //}
                //}
            //}
        //}.writeTo("pom.xml")
    //}
//}


tasks.build.dependsOn aggregatedJavadocs
